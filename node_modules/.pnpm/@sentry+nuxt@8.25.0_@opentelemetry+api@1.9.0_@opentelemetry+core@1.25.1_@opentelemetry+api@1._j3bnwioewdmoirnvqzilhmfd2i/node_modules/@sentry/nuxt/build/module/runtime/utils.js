import { getActiveSpan, getRootSpan, spanToTraceHeader } from "@sentry/core";
import { getDynamicSamplingContextFromSpan } from "@sentry/opentelemetry";
import { dropUndefinedKeys } from "@sentry/utils";
import { dynamicSamplingContextToSentryBaggageHeader } from "@sentry/utils";
export function extractErrorContext(errorContext) {
  const structuredContext = {
    method: void 0,
    path: void 0,
    tags: void 0
  };
  if (errorContext) {
    if (errorContext.event) {
      structuredContext.method = errorContext.event._method || void 0;
      structuredContext.path = errorContext.event._path || void 0;
    }
    if (Array.isArray(errorContext.tags)) {
      structuredContext.tags = errorContext.tags || void 0;
    }
  }
  return dropUndefinedKeys(structuredContext);
}
export function addSentryTracingMetaTags(head) {
  const activeSpan = getActiveSpan();
  const rootSpan = activeSpan ? getRootSpan(activeSpan) : void 0;
  if (rootSpan) {
    const traceParentData = spanToTraceHeader(rootSpan);
    const dynamicSamplingContext = dynamicSamplingContextToSentryBaggageHeader(
      getDynamicSamplingContextFromSpan(rootSpan)
    );
    head.push(`<meta name="sentry-trace" content="${traceParentData}"/>`);
    head.push(`<meta name="baggage" content="${dynamicSamplingContext}"/>`);
  }
}
