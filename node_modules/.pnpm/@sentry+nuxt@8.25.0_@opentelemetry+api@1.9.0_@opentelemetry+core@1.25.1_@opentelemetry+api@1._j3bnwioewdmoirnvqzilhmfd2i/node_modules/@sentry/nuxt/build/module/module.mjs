import * as fs from 'fs';
import * as path from 'path';
import { defineNuxtModule, createResolver, addPluginTemplate, addPlugin, addServerPlugin } from '@nuxt/kit';
import { sentryVitePlugin } from '@sentry/vite-plugin';

function setupSourceMaps(moduleOptions, nuxt) {
  nuxt.hook("vite:extendConfig", async (viteInlineConfig, _env) => {
    const sourceMapsUploadOptions = moduleOptions.sourceMapsUploadOptions || {};
    if ((sourceMapsUploadOptions.enabled ?? true) && viteInlineConfig.mode !== "development") {
      const sentryPlugin = sentryVitePlugin({
        org: sourceMapsUploadOptions.org ?? process.env.SENTRY_ORG,
        project: sourceMapsUploadOptions.project ?? process.env.SENTRY_PROJECT,
        authToken: sourceMapsUploadOptions.authToken ?? process.env.SENTRY_AUTH_TOKEN,
        telemetry: sourceMapsUploadOptions.telemetry ?? true,
        sourcemaps: {
          assets: sourceMapsUploadOptions.sourcemaps?.assets ?? void 0,
          ignore: sourceMapsUploadOptions.sourcemaps?.ignore ?? void 0,
          filesToDeleteAfterUpload: sourceMapsUploadOptions.sourcemaps?.filesToDeleteAfterUpload ?? void 0
        },
        _metaOptions: {
          telemetry: {
            metaFramework: "nuxt"
          }
        },
        debug: moduleOptions.debug ?? false
      });
      viteInlineConfig.plugins = viteInlineConfig.plugins || [];
      viteInlineConfig.plugins.push(sentryPlugin);
      const sourceMapsPreviouslyEnabled = viteInlineConfig.build?.sourcemap;
      if (moduleOptions.debug && !sourceMapsPreviouslyEnabled) {
        console.log("[Sentry]: Enabled source maps generation in the Vite build options.");
        if (!moduleOptions.sourceMapsUploadOptions?.sourcemaps?.filesToDeleteAfterUpload) {
          console.warn(
            `[Sentry] We recommend setting the \`sourceMapsUploadOptions.sourcemaps.filesToDeleteAfterUpload\` option to clean up source maps after uploading.
[Sentry] Otherwise, source maps might be deployed to production, depending on your configuration`
          );
        }
      }
      viteInlineConfig.build = viteInlineConfig.build || {};
      viteInlineConfig.build.sourcemap = true;
    }
  });
}

const module = defineNuxtModule({
  meta: {
    name: "@sentry/nuxt/module",
    configKey: "sentry",
    compatibility: {
      nuxt: "^3.0.0"
    }
  },
  defaults: {},
  setup(moduleOptions, nuxt) {
    const moduleDirResolver = createResolver(import.meta.url);
    const buildDirResolver = createResolver(nuxt.options.buildDir);
    const clientConfigFile = findDefaultSdkInitFile("client");
    if (clientConfigFile) {
      addPluginTemplate({
        mode: "client",
        filename: "sentry-client-config.mjs",
        getContents: () => `import "${buildDirResolver.resolve(`/${clientConfigFile}`)}"
export default defineNuxtPlugin(() => {})`
      });
      addPlugin({ src: moduleDirResolver.resolve("./runtime/plugins/sentry.client"), mode: "client" });
    }
    const serverConfigFile = findDefaultSdkInitFile("server");
    if (serverConfigFile) {
      addPluginTemplate({
        mode: "server",
        filename: "sentry-server-config.mjs",
        getContents: () => `import "${buildDirResolver.resolve(`/${serverConfigFile}`)}"
export default defineNuxtPlugin(() => {})`
      });
      addServerPlugin(moduleDirResolver.resolve("./runtime/plugins/sentry.server"));
    }
    if (clientConfigFile || serverConfigFile) {
      setupSourceMaps(moduleOptions, nuxt);
    }
  }
});
function findDefaultSdkInitFile(type) {
  const possibleFileExtensions = ["ts", "js", "mjs", "cjs", "mts", "cts"];
  const cwd = process.cwd();
  const filePath = possibleFileExtensions.map(
    (e) => path.resolve(
      type === "server" ? path.join(cwd, "public", `instrument.${type}.${e}`) : path.join(cwd, `sentry.${type}.config.${e}`)
    )
  ).find((filename) => fs.existsSync(filename));
  return filePath ? path.basename(filePath) : void 0;
}

export { module as default };
